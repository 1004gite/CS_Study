/*
N자리수의 숫자가 주어진다.
여기서 숫자 k개를 지워야 할 때 얻을 수 있는 가장 큰 수를 구하라.
최대 500,000 자리가지 가능하기 때문에 string으로 수를 관리한다.

최종 아이디어
-숫자를 1개 지우면 어차피 한자리가 줄어든다
-숫자를 지울 때 큰 숫자가 윗자리로 오게 하는것이 유리하다.
    이때, 큰 자리에서의 변경이 무조건 작은 자리보다 크기 때문에 큰 자리수에서 먼저 고려한다.
-즉, 앞자리부터 뒷자리순으로 효율적일때까지 가능한만큼 앞으로 땡긴다.

풀이 1 --> 자리수에 대한 가중치와 숫자에 대한 가중치를 모두 고려하지 않았다.
1. 가장 작은 수를 지우면 손실이 적다
2. 어떤 수를 지울 때 그 수의 앞부분은 자릿수를 손해보고 뒷자리는 변화가 없다.
3. 어떤 수를 지울 때 손실은 해당 수의 (앞자리들의90% + 해당 수)이다.
4. 가장 작은 수를 우선해서 뺀다
    같은 수가 있다면 최대한 앞에 있는 수를 빼서 다른 더 큰 숫자들의 손해를 최소화한다.

풀이 2
0. 현 상황에서 지웠을 때 손실이 가장 적은 수를 k번 찾아 삭제하자.
1. 수를 삭제할 때 작은 숫자를 삭제할수록 유리하다
2. 작은 수를 삭제해도 해당 수의 앞자리들의 자리수가 줄어들기 때문에 무조간 이득은 아니다.
3. 어떤 수를 지웠을 때 그 수 뒤의 수들은 값을 지킬 수 있다.
4. K개의 수를 제거하면 결론적으로 n-k자리 수가 되고 이때 앞 숫자를 가장 크게하는것이 유리하다.
5. 큰자리부터 작은 자리까지 검사할 때 수가 점점 줄어든다면 지우는 것이 유리하다
    즉, 어떤 수를 지워서 앞자리에 큰 수가 오게 되면 지우는 것이 좋다.

풀이 3
1. 풀이 2를 정리
    어떤 수를 지우면 총 1자리 수가 줄어든다
    큰 자리수부터 검사할 때, 바로 다음자리와 비교해서 다음자리보다 작다면 지우는 것이 유리하다.
    큰 자리수일수록 영향력이 크기 때문에 큰 자리수부터 검사한다.
2. 뒤에 더 큰수가 나오면 앞으로 가면서 이번에 찾은 큰 수보다 큰 수가 나오기 전까지 지운다.
3. 이제 뒤로 갈수록 작은 수가 있기 떄문에 이후에도 지워야 할 개수가 남아있다면 가장 뒤부터 지운다.
*/

#include <iostream>
#include <string>
#include <algorithm>
#include <vector>

using namespace std;

int main(void){
    int n,k;
    cin >> n >> k;
    string num;
    cin >> num;

    int index = 0;
    while(1){
        if(k == 0 || index == n) break;
        int diff = (int)(num[index]-num[index+1]);
        // printf("diff(%d, %d) = %d\n",index,index+1,diff);
        if( diff < 0){
            // printf("delete [%c] acc=%d\n",num[index],acc);
            // 큰자리수가 작은 자리수보다 작으면 k개를 지운다.
            int i = 0;
            while(1){
                if(k == 0 || index-i < 0) break;
                if(num[index-i] == 'x'){
                    i++;
                    continue;
                }
                if((int)(num[index+1]-num[index-i]) <= 0) break;
                
                num[index-i] = 'x';
                i++;
                k--;
            }
        }
        index++;
    }
    
    for(int i = n-1; i >=0; i--){
        if(k <= 0) break;
        if(num[i] == 'x') continue;
        num[i] = 'x';
        k--;
    }

    for(int i = 0; i < n; i++){
        if(num[i] == 'x') continue;
        printf("%c",num[i]);
    }
    printf("\n");
}