class bj2193 {
}

/**
 * 2진수 중 가장 앞에 1이 나오고 1이 두번이상 연속되지 않는 수를 이친수라고 한다.
 * n자리 2친수를 구하라
 * 1. 모든 경우의 수는 2^n으로 매우 크다
 * 2. dp를 이용한다. index = 진수의 길이, value = 개수
 * 3. 끝에 0 또는 1을 붙일 수 있다.
 *  이때, 이전에 1로 끝났다면 0만 붙일 수 있다.
 *  즉, dp를 2차원으로 히여 끝에 0,1을 붙이는 경우를 따로 저장한다.
 *  -> 1을 붙일 때는 이전 index의 0을 가져오고
 *  -> 0을 붙일 때는 이전 index의 합을 가져온다.
 * */

fun main(){
    val n = readln().toInt()

    val dp = Array(n+1){LongArray(2)}
    dp[1][1] = 1L

    for(i in 2..n){
        dp[i][0] = dp[i-1][0] + dp[i-1][1]
        dp[i][1] = dp[i-1][0]
    }
    println(dp[n][0]+dp[n][1])

}